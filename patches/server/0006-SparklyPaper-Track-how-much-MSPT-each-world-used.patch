From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GideonWhite1029 <gideonwhite1029@gmail.com>
Date: Sat, 25 May 2024 21:31:39 +0400
Subject: [PATCH] SparklyPaper: Track how much MSPT each world used


diff --git a/src/main/java/io/papermc/paper/command/MSPTCommand.java b/src/main/java/io/papermc/paper/command/MSPTCommand.java
index 8b5293b0c696ef21d0101493ffa41b60bf0bc86b..72a88207ed0bd8730dbd357b7aa9387ea202c1d7 100644
--- a/src/main/java/io/papermc/paper/command/MSPTCommand.java
+++ b/src/main/java/io/papermc/paper/command/MSPTCommand.java
@@ -78,6 +78,46 @@ public final class MSPTCommand extends Command {
                 )
             )
         );
+
+        // SparklyPaper start - track world's MSPT
+        sender.sendMessage(text());
+        sender.sendMessage(text().content("World tick times ").color(GOLD)
+                .append(text().color(YELLOW)
+                        .append(
+                                text("("),
+                                text("avg", GRAY),
+                                text("/"),
+                                text("min", GRAY),
+                                text("/"),
+                                text("max", GRAY),
+                                text(")")
+                        )
+                ).append(
+                        text(" from last 5s"),
+                        text(",", GRAY),
+                        text(" 10s"),
+                        text(",", GRAY),
+                        text(" 1m"),
+                        text(":", YELLOW)
+                )
+        );
+        for (net.minecraft.server.level.ServerLevel serverLevel : server.getAllLevels()) {
+            List<Component> worldTimes = new ArrayList<>();
+            worldTimes.addAll(eval(serverLevel.tickTimes5s.getTimes()));
+            worldTimes.addAll(eval(serverLevel.tickTimes10s.getTimes()));
+            worldTimes.addAll(eval(serverLevel.tickTimes60s.getTimes()));
+
+            sender.sendMessage(text().content("â—´ " + serverLevel.getWorld().getName() + ": ").color(GOLD)
+                    .append(text().color(GRAY)
+                            .append(
+                                    worldTimes.get(0), SLASH, worldTimes.get(1), SLASH, worldTimes.get(2), text(", ", YELLOW),
+                                    worldTimes.get(3), SLASH, worldTimes.get(4), SLASH, worldTimes.get(5), text(", ", YELLOW),
+                                    worldTimes.get(6), SLASH, worldTimes.get(7), SLASH, worldTimes.get(8)
+                            )
+                    )
+            );
+        }
+        // SparklyPaper end
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 6dbea75748021ecc950888213a431ab2495c4a18..bc70cf5cd6c4870dfc527eb1a342ef0db753160e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1766,7 +1766,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             try {
                 //worldserver.timings.doTick.startTiming(); // Spigot // Purpur
+                long i = Util.getNanos(); // SparklyPaper - track world's MSPT
                 worldserver.tick(shouldKeepTicking);
+                // SparklyPaper start - track world's MSPT
+                long j = Util.getNanos() - i;
+
+                // These are from the "tickServer" function
+                worldserver.tickTimes5s.add(this.tickCount, j);
+                worldserver.tickTimes10s.add(this.tickCount, j);
+                worldserver.tickTimes60s.add(this.tickCount, j);
+                // SparklyPaper end
                 //worldserver.timings.doTick.stopTiming(); // Spigot // Purpur
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index fa652c9cea66b31c2452ed77cf251791d22f06fb..f0c483a49737151e1229dd64f7ab92fcad2b1748 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -499,6 +499,12 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     }
     // Paper end - rewrite chunk system
 
+    // SparklyPaper start - track world's MSPT
+    public final MinecraftServer.TickTimes tickTimes5s = new MinecraftServer.TickTimes(100);
+    public final MinecraftServer.TickTimes tickTimes10s = new MinecraftServer.TickTimes(200);
+    public final MinecraftServer.TickTimes tickTimes60s = new MinecraftServer.TickTimes(1200);
+    // SparklyPaper end
+
     // Add env and gen to constructor, IWorldDataServer -> WorldDataServer
     public ServerLevel(MinecraftServer minecraftserver, Executor executor, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PrimaryLevelData iworlddataserver, ResourceKey<Level> resourcekey, LevelStem worlddimension, ChunkProgressListener worldloadlistener, boolean flag, long i, List<CustomSpawner> list, boolean flag1, @Nullable RandomSequences randomsequences, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider) {
         // IRegistryCustom.Dimension iregistrycustom_dimension = minecraftserver.registryAccess(); // CraftBukkit - decompile error
